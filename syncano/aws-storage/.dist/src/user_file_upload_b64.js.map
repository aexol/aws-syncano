{"version":3,"sources":["user_file_upload_b64.js"],"names":["ctx","data","response","bucketName","region","name","file","args","user","meta","Error","indexOf","fileValue","Buffer","from","split","s3instance","fullName","id","putObject","Body","Bucket","Key","ACL","err","json","link","error","message"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;+BACe,WAAMA,GAAN,EAAa;AAC1B,UAAM,EAACC,IAAD,EAAOC,QAAP,KAAmB,6BAAOF,GAAP,CAAzB;AACA,QAAI;AACF,YAAM,EAACG,UAAD,EAAaC,MAAb,KAAuB,MAAM,kCAAiBJ,GAAjB,CAAnC;AACA,YAAM,EAACK,IAAD,EAAOC,IAAP,KAAeN,IAAIO,IAAzB;AACA,YAAM,EAACC,IAAD,KAASR,IAAIS,IAAnB;AACA,UAAI,OAAOD,IAAP,KAAgB,WAApB,EAAiC;AAC/B,cAAM,IAAIE,KAAJ,CACJ,gEADI,CAAN;AAGD;;AAED,UAAGL,KAAKM,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA1B,EAA6B;AAC3B,cAAM,IAAID,KAAJ,CAAU,gCAAV,CAAN;AACD;AACD,YAAME,YAAYC,OAAOC,IAAP,CAAYR,KAAKS,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAZ,EAAgC,QAAhC,CAAlB;AACA,YAAMC,aAAa,iBAAG,EAAChB,GAAD,EAAMI,MAAN,EAAH,CAAnB;AACA,YAAMa,WAAY,GAAET,KAAKU,EAAG,IAAGb,IAAK,EAApC;AACAW,iBAAWG,SAAX,CACE;AACEC,cAAMR,SADR;AAEES,gBAAQlB,UAFV;AAGEmB,aAAKL,QAHP;AAIEM,aAAK;AAJP,OADF,EAOE,UAAUC,GAAV,EAAevB,IAAf,EAAqB;AACnB,YAAIuB,GAAJ,EAAS;AACP,iBAAOtB,SAASuB,IAAT,CAAc,EAACD,GAAD,EAAd,EAAqB,GAArB,CAAP;AACD,SAFD,MAEO;AACL,iBAAOtB,SAASuB,IAAT,CAAc;AACnBxB,gBADmB;AAEnByB,kBAAO,cAAatB,MAAO,kBAAiBD,UAAW,IAAGc,QAAS;AAFhD,WAAd,CAAP;AAID;AACF,OAhBH;AAkBD,KAlCD,CAkCE,OAAOU,KAAP,EAAc;AACd,aAAOzB,SAASuB,IAAT,CAAcE,MAAMC,OAApB,EAA6B,GAA7B,CAAP;AACD;AACF,G","file":"user_file_upload_b64.js","sourcesContent":["import Server from 'syncano-server'\nimport AWS from 'aws-sdk'\nimport s3 from './helpers/s3'\nimport defaultS3Context from './helpers/default_s3_context'\nexport default async ctx => {\n  const {data, response} = Server(ctx)\n  try {\n    const {bucketName, region} = await defaultS3Context(ctx)\n    const {name, file} = ctx.args\n    const {user} = ctx.meta\n    if (typeof user === 'undefined') {\n      throw new Error(\n        'You must be logged in to read or upload files to this endpoint'\n      )\n    }\n\n    if(name.indexOf(\"/\") !== -1 ){\n      throw new Error(\"You are not allowed to do that\")\n    }\n    const fileValue = Buffer.from(file.split(',')[1], 'base64')\n    const s3instance = s3({ctx, region})\n    const fullName = `${user.id}/${name}`\n    s3instance.putObject(\n      {\n        Body: fileValue,\n        Bucket: bucketName,\n        Key: fullName,\n        ACL: 'private'\n      },\n      function (err, data) {\n        if (err) {\n          return response.json({err}, 400)\n        } else {\n          return response.json({\n            data,\n            link: `https://s3.${region}.amazonaws.com/${bucketName}/${fullName}`\n          })\n        }\n      }\n    )\n  } catch (error) {\n    return response.json(error.message, 400)\n  }\n}\n"]}