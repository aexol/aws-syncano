{"version":3,"sources":["default_s3_context.js"],"names":["ctx","db","dr","data","socket","bucket","where","firstOrFail","error","newBucket","get","name","region","AMAZON_KEY","config","bucketName","args","Error"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;+BACe,WAAMA,GAAN,EAAa;AAC1B,UAAMC,KAAK,8BAAcD,GAAd,CAAX;AACA,UAAME,KAAK,8BAAcF,GAAd,CAAX;AACA,UAAM,EAACG,IAAD,EAAOC,MAAP,KAAiB,6BAAOJ,GAAP,CAAvB;AACA;AACA,QAAI;AACF,YAAMK,SAAS,MAAMF,KAAKE,MAAL,CAAYC,KAAZ,CAAkB,MAAlB,EAA0BL,EAA1B,EAA8BM,WAA9B,EAArB;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACd,YAAMC,YAAY,MAAML,OAAOM,GAAP,CAAW,2BAAX,EAAwC;AAC9DC,cAAMV,EADwD;AAE9DW,gBAAQV,EAFsD;AAG9DW,oBAAYb,IAAIc,MAAJ,CAAWD;AAHuC,OAAxC,CAAxB;AAKD;AACD,UAAM,EAACA,UAAD,EAAaE,aAAad,EAA1B,EAA8BW,SAASV,EAAvC,KAA6CF,IAAIgB,IAAvD;AACA;AACA,QAAID,eAAed,EAAf,IAAqBW,WAAWV,EAApC,EAAwC;AACtC,UAAIW,eAAeb,IAAIc,MAAJ,CAAWD,UAA9B,EAA0C;AACxC,cAAM,IAAII,KAAJ,CACJ,gGADI,CAAN;AAGD;AACF;AACD,WAAO;AACLF,gBADK;AAELH;AAFK,KAAP;AAID,G","file":"default_s3_context.js","sourcesContent":["import defaultBucket from './default_bucket'\nimport defaultRegion from './default_region'\nimport Server from 'syncano-server'\nexport default async ctx => {\n  const db = defaultBucket(ctx)\n  const dr = defaultRegion(ctx)\n  const {data, socket} = Server(ctx)\n  // Check if default bucket exists if not create one\n  try {\n    const bucket = await data.bucket.where('name', db).firstOrFail()\n  } catch (error) {\n    const newBucket = await socket.get('aws-storage/create_bucket', {\n      name: db,\n      region: dr,\n      AMAZON_KEY: ctx.config.AMAZON_KEY\n    })\n  }\n  const {AMAZON_KEY, bucketName = db, region = dr} = ctx.args\n  // If somebody wants to enter another socket or bucket AMAZON_KEY is needed as argument\n  if (bucketName !== db || region !== dr) {\n    if (AMAZON_KEY !== ctx.config.AMAZON_KEY) {\n      throw new Error(\n        'You are not allowed to perform operations on this region or bucket. Pass AMAZON_KEY to do that'\n      )\n    }\n  }\n  return {\n    bucketName,\n    region\n  }\n}\n"]}