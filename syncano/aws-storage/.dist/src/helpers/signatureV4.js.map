{"version":3,"sources":["signatureV4.js"],"names":["ctx","logger","config","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","key","MAX_SIZE","args","bucket","region","prefix","policyDate","serviceName","sign","message","createHmac","update","digest","getSignatureKey","service","dateStamp","expirationDate","Date","getTime","toISOString","fileKey","randomBytes","toString","policy","expiration","conditions","acl","maxSize","policyB64","Buffer","from","JSON","stringify","sigKey","signature","url","method","params","AWSAccessKeyId","Policy","Signature"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;+BACe,WAAMA,GAAN,EAAa;AAC1B,UAAM,EAACC,MAAD,KAAW,6BAAOD,GAAP,CAAjB;AACA,UAAM;AACJE,cAAQ;AACNC,yBADM;AAENC,+BAAuBC,GAFjB;AAGNC,mBAAW;AAHL,OADJ;AAMJC,YAAM,EAACC,MAAD,EAASC,MAAT,EAAiBC,SAAS,QAA1B;AANF,QAOFV,GAPJ;;AASA,UAAMW,aAAa,UAAnB;AACA,UAAMC,cAAc,IAApB;;AAEA,aAASC,IAAT,CAAeR,GAAf,EAAoBS,OAApB,EAA6B;AAC3B,aAAO,iBAAOC,UAAP,CAAkB,QAAlB,EAA4BV,GAA5B,EAAiCW,MAAjC,CAAwCF,OAAxC,EAAiDG,MAAjD,EAAP;AACD;;AAED,aAASC,eAAT,CAA0B,EAACb,GAAD,EAAMI,MAAN,EAAcU,OAAd,EAAuBC,SAAvB,EAA1B,EAA6D;AAC3D,aAAOP,KACLA,KAAKA,KAAKA,KAAK,SAASR,GAAd,EAAmBe,SAAnB,CAAL,EAAoCX,MAApC,CAAL,EAAkDU,OAAlD,CADK,EAEL,cAFK,CAAP;AAID;;AAED,QAAIE,iBAAiB,IAAIC,IAAJ,CACnB,IAAIA,IAAJ,GAAWC,OAAX,KAAuB,IAAI,EAAJ,GAAS,EAAT,GAAc,IADlB,EAEnBC,WAFmB,EAArB;AAGA,QAAIC,UAAUf,SAAS,iBAAOgB,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,CAAvB;;AAEA,QAAIC,SAAS;AACXC,kBAAYR,cADD;AAEXS,kBAAY,CACV;AACEtB,gBAAQA;AADV,OADU,EAIV;AACEuB,aAAK;AADP,OAJU,EAOV,CAAC,aAAD,EAAgB,MAAhB,EAAwBN,OAAxB,CAPU,EAQV,CAAC,sBAAD,EAAyB,CAAzB,EAA4BO,OAA5B,CARU;AAFD,KAAb;;AAcA,QAAIC,YAAYC,OAAOC,IAAP,CAAYC,KAAKC,SAAL,CAAeT,MAAf,CAAZ,EAAoCD,QAApC,CAA6C,QAA7C,CAAhB;AACA,QAAIW,SAASpB,gBAAgB;AAC3Bd,2BAD2B;AAE3BO,gBAF2B;AAG3BF,YAH2B;AAI3BG;AAJ2B,KAAhB,CAAb;AAMA,QAAI2B,YAAY1B,KAAKyB,MAAL,EAAaL,SAAb,EAAwBN,QAAxB,CAAiC,KAAjC,CAAhB;AACA,WAAO;AACLa,WAAM,WAAUhC,MAAO,mBADlB;AAELiC,cAAQ,MAFH;AAGLC,cAAQ;AACNC,wBAAgBxC,iBADV;AAENyC,gBAAQX,SAFF;AAGNY,mBAAWN,SAHL;AAINR,aAAK,aAJC;AAKN1B,aAAKoB;AALC;AAHH,KAAP;AAWD,G","file":"signatureV4.js","sourcesContent":["import crypto from 'crypto'\nimport Server from 'syncano-server'\nexport default async ctx => {\n  const {logger} = Server(ctx)\n  const {\n    config: {\n      AWS_ACCESS_KEY_ID,\n      AWS_SECRET_ACCESS_KEY: key,\n      MAX_SIZE = 104857600\n    },\n    args: {bucket, region, prefix = 'files/'}\n  } = ctx\n\n  const policyDate = '20170725'\n  const serviceName = 's3'\n\n  function sign (key, message) {\n    return crypto.createHmac('sha256', key).update(message).digest()\n  }\n\n  function getSignatureKey ({key, region, service, dateStamp}) {\n    return sign(\n      sign(sign(sign('AWS4' + key, dateStamp), region), service),\n      'aws4_request'\n    )\n  }\n\n  let expirationDate = new Date(\n    new Date().getTime() + 1 * 60 * 60 * 1000\n  ).toISOString()\n  let fileKey = prefix + crypto.randomBytes(20).toString('hex')\n\n  let policy = {\n    expiration: expirationDate,\n    conditions: [\n      {\n        bucket: bucket\n      },\n      {\n        acl: 'public-read'\n      },\n      ['starts-with', '$key', fileKey],\n      ['content-length-range', 0, maxSize]\n    ]\n  }\n\n  let policyB64 = Buffer.from(JSON.stringify(policy)).toString('base64')\n  let sigKey = getSignatureKey({\n    AWS_SECRET_ACCESS_KEY,\n    policyDate,\n    region,\n    serviceName\n  })\n  let signature = sign(sigKey, policyB64).toString('hex')\n  return {\n    url: `https://${bucket}.s3.amazonaws.com`,\n    method: 'POST',\n    params: {\n      AWSAccessKeyId: AWS_ACCESS_KEY_ID,\n      Policy: policyB64,\n      Signature: signature,\n      acl: 'public-read',\n      key: fileKey\n    }\n  }\n}\n"]}