{"version":3,"sources":["user_file_read.js"],"names":["ctx","data","response","user","meta","bucketName","region","name","args","EXPIRE","config","Error","indexOf","s3instance","fullName","id","link","getSignedUrl","Bucket","Key","Expires","json","error","message"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;+BACe,WAAMA,GAAN,EAAa;AAC1B,UAAM,EAACC,IAAD,EAAOC,QAAP,KAAmB,6BAAOF,GAAP,CAAzB;AACA,QAAI;AACF,YAAM,EAACG,IAAD,KAASH,IAAII,IAAnB;AACA,YAAM,EAACC,UAAD,EAAaC,MAAb,KAAuB,MAAM,kCAAiBN,GAAjB,CAAnC;AACA,YAAM,EAACO,IAAD,KAASP,IAAIQ,IAAnB;AACA,YAAM,EAACC,SAAS,EAAV,KAAgBT,IAAIU,MAA1B;AACA,UAAI,OAAOP,IAAP,KAAgB,WAApB,EAAiC;AAC/B,cAAM,IAAIQ,KAAJ,CACJ,gEADI,CAAN;AAGD;AACD,UAAIJ,KAAKK,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA3B,EAA8B;AAC5B,cAAM,IAAID,KAAJ,CAAU,gCAAV,CAAN;AACD;AACD,YAAME,aAAa,iBAAG,EAACb,GAAD,EAAMM,MAAN,EAAH,CAAnB;AACA,YAAMQ,WAAY,GAAEX,KAAKY,EAAG,IAAGR,IAAK,EAApC;AACA,YAAMS,OAAOH,WAAWI,YAAX,CAAwB,WAAxB,EAAoC;AAC/CC,gBAAQb,UADuC;AAE/Cc,aAAKL,QAF0C;AAG/CM,iBAASX;AAHsC,OAApC,CAAb;AAKA,aAAOP,SAASmB,IAAT,CAAc,EAACL,IAAD,EAAd,CAAP;AACD,KArBD,CAqBE,OAAOM,KAAP,EAAc;AACd,aAAOpB,SAASmB,IAAT,CAAcC,MAAMC,OAApB,EAA6B,GAA7B,CAAP;AACD;AACF,G","file":"user_file_read.js","sourcesContent":["import Server from 'syncano-server'\nimport AWS from 'aws-sdk'\nimport s3 from './helpers/s3'\nimport defaultS3Context from './helpers/default_s3_context'\nexport default async ctx => {\n  const {data, response} = Server(ctx)\n  try {\n    const {user} = ctx.meta\n    const {bucketName, region} = await defaultS3Context(ctx)\n    const {name} = ctx.args\n    const {EXPIRE = 60} = ctx.config\n    if (typeof user === 'undefined') {\n      throw new Error(\n        'You must be logged in to read or upload files to this endpoint'\n      )\n    }\n    if (name.indexOf('/') !== -1) {\n      throw new Error('You are not allowed to do that')\n    }\n    const s3instance = s3({ctx, region})\n    const fullName = `${user.id}/${name}`\n    const link = s3instance.getSignedUrl('getObject',{\n      Bucket: bucketName,\n      Key: fullName,\n      Expires: EXPIRE\n    })\n    return response.json({link})\n  } catch (error) {\n    return response.json(error.message, 400)\n  }\n}\n"]}