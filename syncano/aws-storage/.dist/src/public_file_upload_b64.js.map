{"version":3,"sources":["public_file_upload_b64.js"],"names":["ctx","data","response","bucketName","region","name","file","args","fileValue","Buffer","from","split","indexOf","Error","s3instance","putObject","Body","Bucket","Key","ACL","err","json","link","error","message"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;+BACe,WAAMA,GAAN,EAAa;AAC1B,UAAM,EAACC,IAAD,EAAOC,QAAP,KAAmB,6BAAOF,GAAP,CAAzB;AACA,QAAI;AACF,YAAM,EAACG,UAAD,EAAaC,MAAb,KAAuB,MAAM,kCAAiBJ,GAAjB,CAAnC;AACA,YAAM,EAACK,IAAD,EAAOC,IAAP,KAAeN,IAAIO,IAAzB;AACA,YAAMC,YAAYC,OAAOC,IAAP,CAAYJ,KAAKK,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAZ,EAAgC,QAAhC,CAAlB;AACA,UAAIN,KAAKO,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA3B,EAA8B;AAC5B,cAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACD;AACD,YAAMC,aAAa,iBAAG,EAACd,GAAD,EAAMI,MAAN,EAAH,CAAnB;AACAU,iBAAWC,SAAX,CACE;AACEC,cAAMR,SADR;AAEES,gBAAQd,UAFV;AAGEe,aAAKb,IAHP;AAIEc,aAAK;AAJP,OADF,EAOE,UAAUC,GAAV,EAAenB,IAAf,EAAqB;AACnB,YAAImB,GAAJ,EAAS;AACP,iBAAOlB,SAASmB,IAAT,CAAc,EAACD,GAAD,EAAd,EAAqB,GAArB,CAAP;AACD,SAFD,MAEO;AACL,iBAAOlB,SAASmB,IAAT,CAAc;AACnBpB,gBADmB;AAEnBqB,kBAAO,cAAalB,MAAO,kBAAiBD,UAAW,IAAGE,IAAK;AAF5C,WAAd,CAAP;AAID;AACF,OAhBH;AAkBD,KA1BD,CA0BE,OAAOkB,KAAP,EAAc;AACd,aAAOrB,SAASmB,IAAT,CAAcE,MAAMC,OAApB,EAA6B,GAA7B,CAAP;AACD;AACF,G","file":"public_file_upload_b64.js","sourcesContent":["import Server from 'syncano-server'\nimport AWS from 'aws-sdk'\nimport s3 from './helpers/s3'\nimport defaultS3Context from './helpers/default_s3_context'\nexport default async ctx => {\n  const {data, response} = Server(ctx)\n  try {\n    const {bucketName, region} = await defaultS3Context(ctx)\n    const {name, file} = ctx.args\n    const fileValue = Buffer.from(file.split(',')[1], 'base64')\n    if (name.indexOf('/') !== -1) {\n      throw new Error('You are not allowed to do that')\n    }\n    const s3instance = s3({ctx, region})\n    s3instance.putObject(\n      {\n        Body: fileValue,\n        Bucket: bucketName,\n        Key: name,\n        ACL: 'public-read'\n      },\n      function (err, data) {\n        if (err) {\n          return response.json({err}, 400)\n        } else {\n          return response.json({\n            data,\n            link: `https://s3.${region}.amazonaws.com/${bucketName}/${name}`\n          })\n        }\n      }\n    )\n  } catch (error) {\n    return response.json(error.message, 400)\n  }\n}\n"]}