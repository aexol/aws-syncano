#!/bin/sh

restGethPath=${HOME}/rest-geth

getOS() {
    if [ -f /etc/os-release ]; then
        # freedesktop.org and systemd
        . /etc/os-release
        OS=$NAME
        VER=$VERSION_ID
    elif type lsb_release >/dev/null 2>&1; then
        # linuxbase.org
        OS=$(lsb_release -si)
        VER=$(lsb_release -sr)
    elif [ -f /etc/lsb-release ]; then
        # For some versions of Debian/Ubuntu without lsb_release command
        . /etc/lsb-release
        OS=$DISTRIB_ID
        VER=$DISTRIB_RELEASE
    elif [ -f /etc/debian_version ]; then
        # Older Debian/Ubuntu/etc.
        OS=Debian
        VER=$(cat /etc/debian_version)
    elif [ -f /etc/SuSe-release ]; then
        # Older SuSE/etc.
        ...
    elif [ -f /etc/redhat-release ]; then
        # Older Red Hat, CentOS, etc.
        ...
    else
        # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
        OS=$(uname -s)
        VER=$(uname -r)
    fi
}

installUbuntuDeps() {
    getOS
    case "$VER" in
    "16.04")
        apt-get -y remove docker docker-engine docker.io
        apt-get -y update
        apt-get -y install \
            apt-transport-https \
            ca-certificates \
            curl \
            software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
        add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
        apt-get -y update
        apt-get -y install docker-ce
        curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        ;;
    *)
        exit 1
        ;;
    esac
}

# For now only xenial support
installDeps() {
    getOS
    case "$OS" in
    "Ubuntu")
        installUbuntuDeps
        ;;
    *)
        exit 1
        ;;
    esac
}

compose() {
    cat << EOF
{{compose}}
EOF
}

gethDevToml() {
    cat << EOF
{{gethDev}}
EOF
}

gethProdToml() {
    cat << EOF
{{geth}}
EOF
}

gethToml() {
    if [ "${ENVIRONMENT}" = "production" ]; then
        gethProdToml
    else
        gethDevToml
    fi
}

traefikToml() {
    cat << EOF
{{traefik}}
EOF
}

createComposeContext() {
    cd ${HOME}
    mkdir -p ${restGethPath} && cd ${restGethPath}
    mkdir -p acme
    compose > docker-compose.yml
    gethToml > geth.toml
    traefikToml > traefik.toml
}

startDocker() {
    service docker start
}

startGeth() {
    cd ${restGethPath}
    docker-compose up -d
}

awsPublicHostname() {
    echo "$(curl http://169.254.169.254/latest/meta-data/public-hostname)"
}

installDeps
startDocker
createComposeContext
startGeth
